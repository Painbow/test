
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.4.2
 * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
 */
Prisma.prismaVersion = {
  client: "5.4.2",
  engine: "ac9d7041ed77bcc8a8dbd2ab6616b39013829574"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userID: 'userID',
  firstName: 'firstName',
  lastName: 'lastName',
  address: 'address',
  phoneNumber: 'phoneNumber',
  emailAddress: 'emailAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  accountID: 'accountID',
  accountType: 'accountType',
  accountStatus: 'accountStatus',
  username: 'username',
  password: 'password',
  userID: 'userID',
  token2fa: 'token2fa',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarScalarFieldEnum = {
  carID: 'carID',
  vehicleNumber: 'vehicleNumber',
  carImage: 'carImage',
  highlights: 'highlights',
  equipment: 'equipment',
  modifications: 'modifications',
  knownFlaws: 'knownFlaws',
  make: 'make',
  model: 'model',
  interiorColor: 'interiorColor',
  exteriorColor: 'exteriorColor',
  startingBid: 'startingBid',
  reservePrice: 'reservePrice',
  accountID: 'accountID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuctionScalarFieldEnum = {
  auctionID: 'auctionID',
  auctionStatus: 'auctionStatus',
  startDate: 'startDate',
  endDate: 'endDate',
  currentHighestBid: 'currentHighestBid',
  auctionCreationTime: 'auctionCreationTime',
  auctionCreatorID: 'auctionCreatorID',
  carID: 'carID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  commentID: 'commentID',
  details: 'details',
  accountID: 'accountID',
  auctionID: 'auctionID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrdersScalarFieldEnum = {
  orderID: 'orderID',
  orderStatus: 'orderStatus',
  paymentDeadline: 'paymentDeadline',
  deliveryType: 'deliveryType',
  shippingAddress: 'shippingAddress',
  orderCreationTime: 'orderCreationTime',
  orderCompletionTime: 'orderCompletionTime',
  orderCreatorID: 'orderCreatorID',
  auctionID: 'auctionID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellingHistoryScalarFieldEnum = {
  saleID: 'saleID',
  orderID: 'orderID',
  accountID: 'accountID'
};

exports.Prisma.BiddingHistoryScalarFieldEnum = {
  bidID: 'bidID',
  bidAmount: 'bidAmount',
  bidTimestamp: 'bidTimestamp',
  bidStatus: 'bidStatus',
  accountID: 'accountID',
  auctionID: 'auctionID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequestScalarFieldEnum = {
  requestID: 'requestID',
  requestStatus: 'requestStatus',
  submissionTime: 'submissionTime',
  vehicleNumber: 'vehicleNumber',
  carImage: 'carImage',
  highlights: 'highlights',
  equipment: 'equipment',
  modifications: 'modifications',
  knownFlaws: 'knownFlaws',
  make: 'make',
  model: 'model',
  interiorColor: 'interiorColor',
  exteriorColor: 'exteriorColor',
  startingBid: 'startingBid',
  reservePrice: 'reservePrice',
  accountID: 'accountID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FAQScalarFieldEnum = {
  questionID: 'questionID',
  questionType: 'questionType',
  questionAns: 'questionAns',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Car: 'Car',
  Auction: 'Auction',
  Comment: 'Comment',
  Orders: 'Orders',
  SellingHistory: 'SellingHistory',
  BiddingHistory: 'BiddingHistory',
  Request: 'Request',
  FAQ: 'FAQ'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
